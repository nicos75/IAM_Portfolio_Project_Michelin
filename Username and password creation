{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8cc6f82d-b11f-412f-8321-ae655f6851ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "import string\n",
    "import csv\n",
    "import pandas as pd\n",
    "import os\n",
    "from faker import Faker\n",
    "\n",
    "fake = Faker()\n",
    "\n",
    "# 1. Function to generate a random password\n",
    "def generate_password(length=8):\n",
    "    chars = string.ascii_letters + string.digits + \"!@#$%^&*()\"\n",
    "    return ''.join(random.choice(chars) for _ in range(length))\n",
    "\n",
    "# 2. Function to assign age above 25\n",
    "def assign_age():\n",
    "    return random.randint(26, 64)  # Age between 26 and 60\n",
    "\n",
    "# 3. Function to assign a random job title\n",
    "def assign_function():\n",
    "    job_titles = ['Marketing Associate', 'VP', 'Secretary', 'Supply Chain analyst', 'IAM consultant', 'Finance auditor', 'Finance analyst', 'Marketing VP', 'DevOps engineer', 'data scientist', 'data analyst', 'Machine Learning Engineer', 'Product Analyst', 'Business Intelligence Analyst', 'Deep Learning Specialist', 'Data Marketer', 'Data Governance Specialist', 'Production manager', 'Machine operator']\n",
    "    return random.choice(job_titles)\n",
    "\n",
    "# 4. Function to import the first name and last name \n",
    "# 4.1. Load the CSV file\n",
    "file_path = 'path_to_your_file.csv'  # Replace with your file path\n",
    "data = pd.read_csv(file_path)\n",
    "\n",
    "# 4.2. Extract the 'first_name' and 'last_name'\n",
    "first_names = data['first_name'].tolist()\n",
    "last_names = data['last_name'].tolist()\n",
    "\n",
    "\n",
    "# Function to create an email address\n",
    "def generate_email(first_name, last_name):\n",
    "    first_initial = first_name[0].lower()  # Get the first letter of the first name\n",
    "    last_name_lower = last_name.lower()     # Convert last name to lowercase\n",
    "    email = f\"{first_initial}.{last_name_lower}@michelin.fr\"  # Construct the email\n",
    "    return email\n",
    "\n",
    "# Generate usernames and passwords\n",
    "def generate_users(count):\n",
    "    first_names = [fake.first_name() for _ in range(count)]  # Generate first names\n",
    "    last_names = [fake.last_name() for _ in range(count)]    # Generate last names\n",
    "    users = []\n",
    "\n",
    "    for i in range(count):\n",
    "        username = f\"{first_names[i][0].lower()}{last_names[i].lower()}{random.randint(100, 999)}\"\n",
    "        password = generate_password()\n",
    "        email = generate_email(first_names[i], last_names[i])\n",
    "        age = assign_age()  # Assign age\n",
    "        job_title = assign_function()  # Assign job title\n",
    "        users.append({\n",
    "            \"First Name\": first_names[i],\n",
    "            \"Last Name\": last_names[i],\n",
    "            \"Username\": username,\n",
    "            \"Password\": password,\n",
    "            \"Email\": email,\n",
    "            \"Age\": age,  # Add age to user data\n",
    "            \"Job Title\": job_title  # Add job title to user data\n",
    "        })\n",
    "\n",
    "    return users\n",
    "\n",
    "# Define the function to generate a CSV file\n",
    "def generate_csv(users):\n",
    "    with open('users.csv', mode='w', newline='') as file:\n",
    "        writer = csv.DictWriter(file, fieldnames=[\"First Name\", \"Last Name\", \"Username\", \"Password\", \"Email\", \"Age\", \"Job Title\"])\n",
    "        writer.writeheader()  # Write the header\n",
    "        writer.writerows(users)  # Write the user data\n",
    "\n",
    "# Generate users and store them in a new list\n",
    "generated_users = generate_users(100)\n",
    "\n",
    "# Call the function to generate the CSV file\n",
    "generate_csv(generated_users)\n",
    "\n",
    "# Specify the path where you want to save the Excel file\n",
    "output_directory = os.path.expanduser('~/Downloads/')  # Changed to user's Downloads directory\n",
    "output_file = os.path.join(output_directory, 'user_data.xlsx')\n",
    "\n",
    "# Ensure the directory exists\n",
    "os.makedirs(output_directory, exist_ok=True)\n",
    "\n",
    "# Export to Excel with the specified file name and path\n",
    "df = pd.DataFrame(generated_users)\n",
    "df.to_excel(output_file, index=False)  # Save to the specified path\n",
    "print(f\"Excel file will be saved to: {output_file}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "anaconda-2022.05-py39",
   "language": "python",
   "name": "conda-env-anaconda-2022.05-py39-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
